## Authentication Service Context

This document provides the context of the authentication service, including a summary of the service and a code review.

### Authentication Service Summary

This microservice handles user authentication and authorization. It provides endpoints for user registration, login, password management, and token management. It is designed to be used as a standalone service that can be integrated into a larger microservices architecture.

**Tech Stack:**

*   Node.js
*   Express.js
*   TypeScript
*   AWS Cognito
*   Jest
*   Winston
*   Inversify
*   Zod

**Project Structure:**

The project is structured using a clean architecture approach, with a clear separation of concerns between the different layers of the application.

*   `src/`:
    *   `api/`: API layer (controllers, routes, middlewares, DTOs)
    *   `application/`: Application layer (services, use cases, interfaces)
    *   `domain/`: Domain layer (entities, exceptions, value-objects)
    *   `infrastructure/`: Infrastructure layer (adapters, config, persistence)
    *   `shared/`: Shared code (constants, errors, types, utils)
*   `tests/`: Tests

**Available Routes:**

*   Authentication Routes: `/auth/signup`, `/auth/confirm-signup`, `/auth/login`, `/auth/verify-mfa`, `/auth/refresh-token`, `/auth/forgot-password`, `/auth/reset-password`, `/auth/change-password`, `/auth/me`, `/auth/logout`
*   System Routes: `/system/health`, `/system/server-info`

### Code Review Summary

**Overall Impression:**

A well-structured and robust authentication microservice. The use of Clean Architecture principles, dependency injection (tsyringe), and a clear separation of concerns is commendable. The code demonstrates a strong understanding of modern TypeScript development practices and AWS Cognito integration. The implementation of resilience patterns (Circuit Breaker) and thorough error handling are standout features.

**Consistency:** High. Consistent coding style, naming conventions, and architectural patterns.

**Flexibility & Extensibility:** High. DI and interfaces make it easy to swap out implementations. Clean Architecture allows for independent modification of different layers.

**Robustness & Error Handling:** Very High. Centralized error handling, custom error types, and excellent mapping of Cognito errors to domain errors.

**Resiliency:** High. Proactive approach with the Circuit Breaker pattern. Detailed logging provides good visibility.

**Security:** Good. Use of `helmet`, environment-aware CORS, and reliance on Cognito for password handling are all good practices.

**Key Recommendations for Improvement:**

1.  **Track `TODO`s:** Convert `TODO` comments into formal issues.
2.  **Enhance Configuration:** Consider a more advanced configuration library for production environments.
3.  **Add Retries:** Implement a retry mechanism with exponential backoff for transient errors.
4.  **Implement Rate Limiting:** Add rate limiting to sensitive endpoints.
5.  **Prioritize `authGuardMiddleware`:** Implement and apply the authentication guard middleware to protected routes.
